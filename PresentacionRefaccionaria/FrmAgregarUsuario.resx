<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>